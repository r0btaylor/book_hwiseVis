liv3 = "Income Generation: Primary Water Source",
wb3 = "General Health",
wb4 = "No. Days Poor Physical Health",
wb5 = "No. Days Poor Mental Health",
wb6 = "No. Days Health Prevented Normal Activities",
wb7 = "Feel Unable to Control Important Things",
wb8 = "Feel Confident in Ability to Control Problems",
wb9 = "Feel Things Going Your Way",
wb10 = "Feel Difficulties Could Not Be Overcome"
)
# Add newly created variables
q_data <- q_data %>% mutate(
sd5_ = "Household: Ensures Sufficient Water",
sd6_ = "Household: Children Under 18",
wat12_ = "Drinking Water Treatment",
wat12_6_ = "Drinking Water Treatment: Multiple Methods",
wat15_ = "Fewest Water Problems",
hw = "Calculated HWISE Score",
liv1_ = "Income Generation",
liv1_10_ = "Income Generation: Multiple Activities",
liv4_ = "Income Generation: Problematic Water Quantity or Quality",
wat5a = "Drinking Water: Collection Time Per Week (mins)",
wat5b = "Drinking Water: Collection Time Per Week (grouped)"
) %>%
relocate(sd5_, .after = sd4) %>%
relocate(sd6_, .after = sd5_) %>%
relocate(wat12_, .before = wat12_1) %>%
relocate(wat12_6_, .after = wat12_5) %>%
relocate(wat15_, .before = wat15_1) %>%
relocate(hw, .before = hw1) %>%
relocate(liv1_, .before = liv1_1) %>%
relocate(liv1_10_, .after = liv1_9) %>%
relocate(liv4_, .after = liv3) %>%
relocate(wat5a, .after = wat5) %>%
relocate(wat5b, .after = wat5a)
kable(head(q_data)) %>%
kable_styling("striped", "condensed", full_width = FALSE) %>%
scroll_box(width = "100%", height = "400px")
# Read Excel
text_data <- try(xl.read.file("../data/demo_data.xlsx",
header = FALSE,
password =  "password",
top.left.cell = "A3")) # ignores row 1 & 2 (chr), ensures single accurate class per col
# Set colnames as question codes
colnames(text_data) <- colnames(raw_data)
# match cols to data in clean.data
text_data <- text_data[, colnames(text_data) %in% colnames(num_data)]
# Add newly created variables
`%!in%` <- Negate(`%in%`) # create 'not in' function
text_data <- bind_cols(text_data, num_data[, colnames(num_data) %!in% colnames(text_data)])
text_data <- text_data %>%
relocate(sd5_, .after = sd4) %>%
relocate(sd6_, .after = sd5_) %>%
relocate(wat12_, .before = wat12_1) %>%
relocate(wat12_6_, .after = wat12_5) %>%
relocate(wat15_, .before = wat15_1) %>%
relocate(hw, .before = hw1) %>%
relocate(liv1_, .before = liv1_1) %>%
relocate(liv1_10_, .after = liv1_9) %>%
relocate(liv4_, .after = liv3) %>%
relocate(wat5a, .after = wat5) %>%
relocate(wat5b, .after = wat5a)
# Insert correct text responses
text_data$camp <- num_data$camp
text_data$sd11_2 <- num_data$sd11_2
text_data$sd5_ <- sapply(text_data$sd5_, function(x) {
switch(x, "Self", "Spouse", "Children: Boy", "Children: Girl", "Other", "Shared Responsibility")})
text_data$sd9 <- num_data$sd9
## Define a list of all binary questions to format together
binary_q <- c("sd11","sd15","sd17","sd18","sd19","w1_1","w2","w3","w4","w5",
"w6","w7","wat6","wat7","wat11","wat12_1","wat12_2","wat12_3","wat12_4",
"wat12_5","wat12_6_","wat15_1","wat15_2","wat15_3","wat15_4","wat15_5","wat15_6",
"wat15_7","wat15_8","wat15_9","wat15_10","wat15_11","wat15_12","liv1_1","liv1_2",
"liv1_3","liv1_4","liv1_5","liv1_6","liv1_7","liv1_8","liv1_9","liv1_10_","liv2")
## format all binaries
text_data[binary_q] <- lapply(text_data[binary_q], function(x){
x = replace(x, which(x==0),"No")
x = replace(x, which(x==1),"Yes")
x = replace(x, which(x==2),"Don't Know")
x = replace(x, which(x==88),"NA")})
text_data$sd20 <- sapply(text_data$sd20, function(x) {
x = replace(x, which(x==1),"Wood")
x = replace(x, which(x==2),"Gas Bottles")
x = replace(x, which(x==3),"Other")})
text_data[c("wat1","wat2","wat3","liv3")] <- lapply(text_data[c("wat1","wat2","wat3","liv3")], function(x){
x = replace(x, which(x==1),"Piped Supply")
x = replace(x, which(x==2),"Stand Pipe")
x = replace(x, which(x==3),"Borehole/Tubewell")
x = replace(x, which(x==4),"Dug Well: Protected")
x = replace(x, which(x==5),"Dug Well: Unrotected")
x = replace(x, which(x==6),"Spring: Protected")
x = replace(x, which(x==7),"Spring: Unprotected")
x = replace(x, which(x==8),"Rainwater Collection")
x = replace(x, which(x==9),"Small Water Vendor")
x = replace(x, which(x==10),"Tanker Truck")
x = replace(x, which(x==11),"Bottled Water")
x = replace(x, which(x==12),"Sachet Water")
x = replace(x, which(x==13),"Surface Water/Pond/River/Lake")
x = replace(x, which(x==14),"Other Person")
x = replace(x, which(x==15),"Other")
x = replace(x, which(is.na(x)),"NA")
})
## Change to grouped values
text_data$wat5b <- sapply(text_data$wat5b, function(x){
x = replace(x, which(x==1), "0-100 mins")
x = replace(x, which(x==2), "101-200 mins")
x = replace(x, which(x==3), "201-300 mins")
x = replace(x, which(x==4), "301-400 mins")
x = replace(x, which(x==5), "401-500 mins")
x = replace(x, which(x==6), "501-600 mins")
x = replace(x, which(x==7), "600+ mins")
})
text_data$wat12_ <- sapply(text_data$wat12_, function(x){
switch(x+1, "None","Boil","Filter","Add Chemicals/Chlorine","Other","Combined Methods")})
text_data$wat15_ <- sapply(text_data$wat15_, function(x) {
switch(x, "Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Multiple Months")})
text_data$liv1_ <- sapply(text_data$liv1_, function(x) {
switch(x+1, "None of the Above", "Crop Production","Betel Nut/Leaf Production",
"Livestock Production","Salt Production","Sea Fishing","Shrimp Farming",
"Fish Farming","Other","Multiple Activities")})
text_data$liv4_ <- sapply(text_data$liv4_, function(x){
switch(x+1, "No","Quantity","Quality","Both Quantity & Quality")})
text_data[, grepl("^hw.*\\d$", names(text_data))] <- apply(text_data[, grepl("^hw.*\\d$", names(text_data))], 2, function(x){
x = replace(x, which(x=="0_times"), "Never")
x = replace(x, which(x=="1-2_times"), "Rarely")
x = replace(x, which(x=="3-10_times"), "Sometimes")
x = replace(x, which(x=="11-20_times"), "Often")
x = replace(x, which(x=="more_than_20_times"), "Always")
x = replace(x, which(x=="dont_know"), "Don't Know")
})
text_data[, grepl("pay", names(text_data))] <- apply(text_data[,grepl("pay", names(text_data))], 2, function(x){
x = replace(x, which(x=="Fixed_cost_per_amount"), "Fixed: Per Amount")
x = replace(x, which(x=="Fixed_cost_per_month"), "Fixed: Per Month")
x = replace(x, which(x=="VC_permonth_on_set_factors"), "Variable: Set Factors")
x = replace(x, which(x=="Variable_cost_per_amount_or_use"), "Variable: Per Amount")
x = replace(x, which(x=="no_fixed_payment_is_made"), "No Fixed Payment")
x = replace(x, which(x=="it_is_free"), "Free")
})
text_data <-  text_data %>% mutate(across(where(is.character),
~ str_replace_all(., "_and_", "_&_") %>%
str_replace_all("_", " ") %>%
str_to_title)) %>% mutate(across(where(is.logical), str_to_title))
text_data <- text_data %>% mutate(across(c("w8","wat8","wat16","wat17","liv6","liv5"),
~ str_replace_all(., "\n", " ") %>%
str_squish %>%
str_to_sentence))
text_data[is.na(text_data)] <- "NA"
kable(head(text_data)) %>%
kable_styling("striped", "condensed", full_width = FALSE) %>%
scroll_box(width = "100%", height = "400px")
# Define custom skim (display full names for factor levels in cat data)
my_skim <- skim_with(factor = sfl(top_counts = ~top_counts(., max_char = 25, max_levels = 50)),numeric = list(hist = NULL))
# create all summary stats
sum_df <- text_data %>%
mutate(across(which(sapply(.,class)!="numeric"),factor)) %>%
select(-c("gps-longitude","gps-latitude",sd11_3,w8,wat8,wat16,wat17,liv5,liv6)) %>%
#group_by_at(group_val) %>%
my_skim %>%
focus(c(
skim_variable,
#all_of(group_val),
n_missing,
numeric.mean,
numeric.p0,
numeric.p50,
numeric.p100,
numeric.sd,
factor.n_unique,
factor.top_counts))
# rename columns
sum_df <- data.frame(sum_df) %>%
rename("Type" = "skim_type",
"Variable" = "skim_variable",
"Missing" = "n_missing",
"Mean" = "numeric.mean",
"Min" = "numeric.p0",
"Median" = "numeric.p50",
"Max" = "numeric.p100",
"Standard Deviation" = "numeric.sd",
"Category Levels" = "factor.n_unique",
"Category Level Counts" = "factor.top_counts")
# round numeric data
sum_df <- sum_df %>% mutate_if(is.numeric, round, 1)
# categorical data
sum_cat <- sum_df%>%
filter(Type == "factor") %>%
select(-c(`Type`,`Mean`,`Min`,`Median`, `Max`, `Standard Deviation`))%>%
mutate(Question = sapply(Variable, function(x) q_data[[x]])) %>% # add question text column
relocate(Question, .after = Variable)
kable(sum_cat) %>%
kable_styling("striped", "condensed", full_width = FALSE) %>%
scroll_box(width = "100%", height = "400px")
# numeric data
sum_num <- sum_df%>%
filter(Type == "numeric") %>%
select(-c(`Category Levels`,`Category Level Counts`, `Type`))%>%
mutate(Question = sapply(Variable, function(x) q_data[[x]])) %>% # add question text column
relocate(Question, .after = Variable)
kable(sum_num) %>%
kable_styling("striped", "condensed", full_width = FALSE) %>%
scroll_box(width = "100%", height = "400px")
# create all summary stats
group_df <- text_data %>%
mutate(across(which(sapply(.,class)!="numeric"),factor)) %>%
select(-c("gps-longitude","gps-latitude",sd11_3,w8,wat8,wat16,wat17,liv5,liv6)) %>%
group_by_at("location") %>%
my_skim %>%
focus(c(
skim_variable,
all_of("location"),
n_missing,
numeric.mean,
numeric.p0,
numeric.p50,
numeric.p100,
numeric.sd,
factor.n_unique,
factor.top_counts))
# rename columns
group_df <- data.frame(group_df) %>%
rename("Type" = "skim_type",
"Variable" = "skim_variable",
"Location" = "location",
"Missing" = "n_missing",
"Mean" = "numeric.mean",
"Min" = "numeric.p0",
"Median" = "numeric.p50",
"Max" = "numeric.p100",
"Standard Deviation" = "numeric.sd",
"Category Levels" = "factor.n_unique",
"Category Level Counts" = "factor.top_counts")
# round numeric data
group_df <- group_df %>% mutate_if(is.numeric, round, 1)
# group by location
sum_group <- group_df%>%
filter(Type == "numeric") %>%
select(-c(`Category Levels`,`Category Level Counts`, `Type`))%>%
mutate(Question = sapply(Variable, function(x) q_data[[x]])) %>% # add question text column
relocate(Question, .after = Variable)
kable(sum_group) %>%
kable_styling("striped", "condensed", full_width = FALSE) %>%
scroll_box(width = "100%", height = "400px")
# Set theme
my_theme <- theme(plot.title = element_text(size=13, color="#464646",face="bold", hjust=0.5),
axis.title = element_text(size=13, color="#464646"),
axis.text = element_text(size=12, color="#464646"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
legend.title = element_text(size=13, color="#464646",face="bold",hjust=0.5),
legend.text = element_text(size=12, color="#464646"),
legend.background = element_rect(fill = "#f2f2f2"),
panel.background = element_rect(fill = "#f2f2f2"),
plot.margin = margin(1,1,1,1, "cm"))
paletteFunc <- colorRampPalette(c("#18db50","#1d6cac","#00b4ff"))
p1 <- # categorical x, not grouped
num_data %>%
ggplot +
aes(factor(hw2)) +
geom_bar()+
geom_bar(fill = paletteFunc(length(unique(num_data[["hw2"]])))) +
scale_x_discrete(breaks = num_data[["hw2"]],
labels = text_data[["hw2"]]) +
labs(title = paste0(q_data["hw2"]),
x = NULL) +
my_theme
ggplotly(p1, tooltip = "y")
p2 <- num_data %>%
ggplot +
aes(x = factor(hw1), y = hw, fill = location)+
geom_boxplot(varwidth = TRUE,
alpha = 0.8,
outlier.size = 2,
outlier.shape = 8,
outlier.colour = "black") +
labs(title = paste0(q_data["hw1"]),
x = NULL,
y = paste0(q_data["hw"]),
fill = "")+
scale_fill_manual(values = paletteFunc(length(levels(factor(num_data[["location"]]))))) +
scale_x_discrete(breaks = num_data[["hw1"]],
labels = text_data[["hw1"]]) +
#scale_y_continuous(breaks = seq(0,max(y,na.rm=T),ceiling(max(y,na.rm=T)/10))) +
my_theme
ggplotly(p2) %>% layout(boxmode = "group")
p3 <- num_data %>%
ggplot +
aes(x = wat5, y = hw, color = camp) +
geom_jitter(size = 1, width=0.1, height=0.1 )+
geom_smooth(method = lm, color = "#ffa500") +
labs(title = paste0(q_data[["wat5"]], " ~ ",q_data[["hw"]]),
x = paste0(q_data[["wat5"]]),
y = paste0(q_data[["hw"]]),
color = paste0(q_data[["camp"]]))  +
scale_color_manual(values = paletteFunc(length(unique(num_data[["camp"]])))) +
my_theme
ggplotly(p3) %>% layout(legend = list(font = list(size = 12)))
# Read shape files
camps <- st_read(dsn = "../data/shapefiles/camp", layer = "T220130_RRC_Outline_Camp_AL1")
camps <- subset(camps, camps$Upazila=="Teknaf")
unions <- st_read(dsn = "../data/shapefiles/union", layer = "bgd_admbnda_adm4_bbs_20201113")
unions <- subset(unions, unions$ADM4_EN %in% c("Baharchhara","Nhilla","Sabrang","Teknaf","Teknaf Paurashava","Whykong"))
infra <- st_read(dsn = "../data/shapefiles/infra", layer = "WASH_Infras_LT_Bath_TW_May_31_2022")
infra <- subset(infra, infra$Upazila=="Teknaf") %>% infra[c(1:33)]
# replacements for consistency
infra$Type_Faci <- sapply(infra$Type_Faci, function(x) {
x = replace(x, which(x=="latrine"),"Latrine")
x = replace(x, which(x=="Tubewell-Handpump"), "Handpump Tubewell")
x = replace(x, which(x=="Both (Latrine & Bathing)"), "Latrine & Bathing")
})
# create base map
base_map <- leaflet(data = text_data) %>%
setView(lng = text_data[1, "gps-longitude"],
lat = text_data[1, "gps-latitude"],
zoom=12) %>%
addTiles(group = "Default Map") %>%
addProviderTiles("CartoDB.Positron", group = "Minimal Map") %>%
addProviderTiles("Esri.WorldImagery", group = "Satelite Map")%>%
addScaleBar(position = "bottomleft",
options = scaleBarOptions(maxWidth=400)) %>%
addMiniMap(position = "bottomright", toggleDisplay = TRUE, width = 200) %>%
# add infrastructure markers
addCircleMarkers(data = infra[infra$Type_Faci=="Bathing Cubicle" | infra$Type_Faci=="Latrine & Bathing", ],
~Long,
~Lat,
radius = 3,
stroke = T,
weight = 1, opacity = 1,
fillOpacity = 0,
group = "Bathing Cubicle",
popup=~paste(
"<b>", "Agency: ",Agency,"</b><br/>",
"Facility: ", Type_Faci, "<br/>",
"Sub Type: ",Sub_Type_F, "<br/>",
"Bathing Total: ", Bathing, "<br/>",
"Female: ", Bathing_F, "<br/>",
"Male: ", Bathing_M, "<br/>",
"Universal: ", Bath_gen_u, "<br/>"))%>%
addCircleMarkers(data = infra[infra$Type_Faci=="Latrine" | infra$Type_Faci=="Latrine & Bathing", ],
~Long,
~Lat,
radius = 3,
stroke = T,
weight = 1, opacity = 1,
fillOpacity = 0,
color="green",
group = "Latrine",
popup=~paste(
"<b>", "Agency: ",Agency,"</b><br/>",
"Facility: ", Type_Faci, "<br/>",
"Sub Type: ",Sub_Type_F, "<br/>",
"Latrines: ", LT, "<br/>",
"Female: ", LT_F, "<br/>",
"Male: ", LT_M, "<br/>",
"Universal: ", LT_Gen_uns, "<br/>",
"Slabs: ", Slabs, "<br/>",
"Rings: ", Rings, "<br/>",
"Structure: ", struc_wall, ", ", struc_pill, "<br/>",
"Volume (m3): ", Volume_M3, "<br/>"))%>%
addCircleMarkers(data = infra[infra$Type_Faci=="Handpump Tubewell", ],
~Long,
~Lat,
radius = 3,
stroke = T,
weight = 1, opacity = 1,
fillOpacity = 0,
color="red",
group = "Handpump Tubewell",
popup=~paste(
"<b>", "Agency: ",Agency,"</b><br/>",
"Facility: ", Type_Faci, "<br/>",
"Sub Type: ",Sub_Type_F, "<br/>",
"TW_Depth: ", Depth_TW_F, "<br/>"))%>%
# add polygons
addPolygons(data = camps,
color = "#800080", weight = 2, smoothFactor = 0.5, opacity = 1,
fill= FALSE, group = "Camp Boundaries") %>%
addPolygons(data = unions,
color = "#cc0000", weight = 2, smoothFactor = 0.5, opacity = 1,
fill= FALSE, group = "Administrative Boundaries") %>%
# add UI toggles
addLayersControl(baseGroups = c("Default Map","Satelite Map", "Minimal Map"),
overlayGroups = c("Camp Boundaries", "Administrative Boundaries", "Bathing Cubicle", "Latrine", "Handpump Tubewell"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("Bathing Cubicle", "Latrine", "Handpump Tubewell"))
pal1 <- colorRampPalette(c("#cc0000","#ff1a1a","#ffa500","#ffd700","#00ff00","#00ced1","#003366"))
# colorData <- filtered_data()[[input$circle_color]]
color <- colorNumeric(rev(pal1(6)), domain = num_data[["hw"]])
legend_vals = text_data[["hw"]]
m1 <- base_map %>%
addCircleMarkers(data = text_data,
text_data[, "gps-longitude"],
text_data[, "gps-latitude"],
radius = 4,
stroke = FALSE,
group = "points",
fillOpacity=1,
popup = ~paste(
"<b>", "HWISE Score: ","</b>",hw,"<br/>",
"<b>","Primary source (drinking): ","</b>",wat1, "<br/>",
"<b>","Primary source (non-drinking): ","</b>",wat3, "<br/>",
"<b>","Collection Time (drinking, weekly): ","</b>",wat5a, "<br/>",
"<b>","Treatment (drinking): ","</b>",wat12_, "<br/>",
"<b>","Quality problems: ","</b>",wat8, "<br/>",
"<b>","Supply interruptions: ","</b>",hw2, "<br/>",
"<b>","No useable/drinkable water: ","</b>",hw11, "<br/>",
"<b>","Borrow water: ","</b>",hw13, "<br/>"
),
color = ~color(text_data[["hw"]])) %>%
addLegend("topright",
pal=color,
values=legend_vals,
opacity = 1,
title=q_data[["hw"]],
layerId="colorLegend")
m1
knitr::include_graphics("https://i.imgur.com/rL00TEq.png")
unlink("Data Science/gitHub/shinyVisualiser/scripts/1_shinyVisualiser_cache", recursive = TRUE)
unlink("Data Science/gitHub/shinyVisualiser/scripts/1_shinyVisualiser_cache", recursive = TRUE)
unlink("Data Science/gitHub/shinyVisualiser/scripts/1_shinyVisualiser_cache", recursive = TRUE)
setwd("~/Data Science/gitHub/shinyVisualiser/scripts")
?write.csv
View(q_data)
write.csv(q_data)
t(q_data)
questions <- data.frame(t(q_data))
View(questions)
questions[1]
questions[,1]
questions[1,1]
questions[,2]
questions[2,]
rownmaes(questions[2,])
rownames(questions[2,])
rowname(questions[2,])
raw_data[c(1,2),]
row.names(questions)
questions <- data.frame("variable_code" = row.names(questions),)
q_data[1,]
q_data[[1,]]
questions <- data.frame("variable_code" = row.names(questions),
"question_text" = q_data[1,])
View(questions)
rm(questions)
c(q_data[1,])
c(q_data[[1,]])
questions <- data.frame("question_text" = c(q_data[1,]))
View(questions)
questions <- data.frame("question_text" = list(q_data[1,]))
View(questions)
as.list(q_data[[1,]])
as.list(q_data[1,])
questions <- data.frame("question_text" = c(t(q_data[1])))
View(questions)
questions <- data.frame("question_text" = c(t(q_data[,1])))
View(questions)
q_data[,1]
q_data
t(q_data)
t(q_data)[,1]
questions <- data.frame("question_text" = c(t(q_data)[,1]))
View(questions)
questions <- data.frame("variable_code" = col.names(q_data),
"question_text" = c(t(q_data)[,1]))
colnames(q_data)
questions <- data.frame("variable_code" = colnames(q_data),
"question_text" = c(t(q_data)[,1]))
View(questions)
questions <- data.frame("variable_code" = colnames(q_data),
"question_text" = c(t(q_data)[,1]))
rownames(questions) <- NULL
View(questions)
write.csv(questions, "../data/questions_table", row.names = FALSE)
write.csv(questions, "../data/questions_table.csv", row.names = FALSE)
?read.csv
questions <- read.csv("../data/questions_table.csv", header =TRUE)
View(questions)
questions[c(1:9),]
rownames(questions)
questions[,1]
questions[grepl("sd"),1]
?grepl
grepl("sd", questions[,1])
questions[grepl("sd", questions[,1]),1]
questions[grepl("sd", questions[,1]),]
questions[grepl("w", questions[,1]),]
questions[grepl("w", questions[,1],fixed=T),]
work <-
questions["variable_code"]
rm(work)
questions["variable_code"]
questions["variable_code"] %in% c("w1_1","w2","w3","w4","w5","w5","w6","w7")
questions[,"variable_code"] %in% c("w1_1","w2","w3","w4","w5","w5","w6","w7")
questions[questions[,"variable_code"] %in% c("w1_1","w2","w3","w4","w5","w5","w6","w7")]
questions[,questions[,"variable_code"] %in% c("w1_1","w2","w3","w4","w5","w5","w6","w7")]
questions[questions$variable_code %in% c("w1_1","w2","w3","w4","w5","w5","w6","w7")]
questions[questions$variable_code %in% c("w1_1","w2","w3","w4","w5","w5","w6","w7"),]
questions[questions$variable_code %in% c("w1_1","w2","w3","w4","w5","w5","w6","w7", "w8"),]
questions[grepl("hw", questions[,1]),]
View(raw_data)
View(text_data)
questions[grepl("wat", questions[,1]),]
questions[grepl("liv", questions[,1]),]
questions[grepl("wb", questions[,1]),]
unlink("1_shinyVisualiser_cache", recursive = TRUE)
unlink("1_shinyVisualiser_cache", recursive = TRUE)
colnames(questions)
colnames(questions) <- c("Variable Code", "Question Text")
View(questions)
questions[questions$`Variable Code` %in% c("p1","p2","p3","p4","p5"),]
?kable
knitr::opts_chunk$set(echo = TRUE, cache = F)
knitr::include_graphics("https://i.imgur.com/y1j0u48.png")
?embed_youtube
